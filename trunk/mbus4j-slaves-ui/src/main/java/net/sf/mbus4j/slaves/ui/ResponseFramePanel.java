package net.sf.mbus4j.slaves.ui;

/*
 * #%L
 * mbus4j-slaves-ui
 * %%
 * Copyright (C) 2009 - 2014 MBus4J
 * %%
 * mbus4j - Drivers for the M-Bus protocol - http://mbus4j.sourceforge.net/
 * Copyright (C) 2009-2014, mbus4j.sf.net, and individual contributors as indicated
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 * 
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 * #L%
 */

import net.sf.mbus4j.dataframes.ApplicationReset;
import net.sf.mbus4j.dataframes.RequestClassXData;
import net.sf.mbus4j.dataframes.ResponseFrameContainer;
import net.sf.mbus4j.dataframes.UserDataResponse;
import net.sf.mbus4j.dataframes.datablocks.DataBlock;
import net.sf.mbus4j.dataframes.datablocks.vif.Vife;
import net.sf.mbus4j.dataframes.datablocks.vif.VifePrimary;

import java.awt.Component;
import net.sf.mbus4j.slaves.Slave;

/**
 *
 * @author aploese
 */
public class ResponseFramePanel
        extends javax.swing.JPanel {

    /**
     * Creates new form ResponseFramePanel
     */
    public ResponseFramePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        responsePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        selectPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setToolTipText("List of responses");
        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        responsePanel.setName("responsePanel"); // NOI18N
        responsePanel.setLayout(new javax.swing.BoxLayout(responsePanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(responsePanel);

        jTabbedPane1.addTab("Response", jScrollPane1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        requestPanel.setName("requestPanel"); // NOI18N
        requestPanel.setLayout(new javax.swing.BoxLayout(requestPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane2.setViewportView(requestPanel);

        jTabbedPane1.addTab("Request", jScrollPane2);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        selectPanel.setName("selectPanel"); // NOI18N
        selectPanel.setLayout(new javax.swing.BoxLayout(selectPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane3.setViewportView(selectPanel);

        jTabbedPane1.addTab("Select", jScrollPane3);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Response");
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel requestPanel;
    private javax.swing.JPanel responsePanel;
    private javax.swing.JPanel selectPanel;
    // End of variables declaration//GEN-END:variables
    private String frameName;
    private ResponseFrameContainer rfc;

    void setResponseFrameContainer(ResponseFrameContainer rfc) {
        this.rfc = rfc;

        frameName = rfc.getName();

//        if (true) return;
        responsePanel.removeAll();

        if (rfc.getResponseFrame() instanceof UserDataResponse) {
            UserDataResponse response = (UserDataResponse) rfc.getResponseFrame();
            UserDataResponsePanel panel = new UserDataResponsePanel();
            panel.setUserDataResponse(response,
                    rfc.getName());
            responsePanel.add(panel);

            for (DataBlock db : response) {
                DataBlockPanel dbp = new DataBlockPanel();
                dbp.setVifes((Vife[]) VifePrimary.values());
                dbp.setDataBlock(db);
                responsePanel.add(dbp);
            }
        }

        requestPanel.removeAll();

        if (rfc.getRequestFrame() instanceof RequestClassXData) {
            RequestClassXData request = (RequestClassXData) rfc.getRequestFrame();
            RequestClassXDataPanel panel = new RequestClassXDataPanel();
            panel.setRequestClassXData(request);
            requestPanel.add(panel);
        }

        selectPanel.removeAll();

        if (rfc.getSelectFrame() instanceof ApplicationReset) {
            ApplicationReset appReset = (ApplicationReset) rfc.getSelectFrame();
            ApplicationResetPanel panel = new ApplicationResetPanel();
            panel.setApplicationReste(appReset);
            selectPanel.add(panel);

            for (DataBlock db : appReset) {
                DataBlockPanel dbp = new DataBlockPanel();
                dbp.setDataBlock(db);
                selectPanel.add(dbp);
            }
        }
    }

    ResponseFrameContainer getResponseFrameContainer() {
        return rfc;
    }

    void commitChanges(Slave s, int index) {
        int dbIndex = 0;
        for (int i = 0; i < responsePanel.getComponentCount(); i++) {
            final Component c = responsePanel.getComponent(i);
            if (c instanceof UserDataResponsePanel) {
                ((UserDataResponsePanel) c).commitChanges(rfc);
                rfc.setName(((UserDataResponsePanel) c).getFrameName());
            } else if (c instanceof DataBlockPanel) {
                ((DataBlockPanel) c).commitChanges((UserDataResponse) rfc.getResponseFrame(), dbIndex++);
            }
        }

        for (int i = 0; i < requestPanel.getComponentCount(); i++) {
            final Component c = requestPanel.getComponent(i);
            if (c instanceof RequestClassXDataPanel) {
                ((RequestClassXDataPanel) c).commitChanges(rfc);
            }
        }

        dbIndex = 0;
        for (int i = 0; i < selectPanel.getComponentCount(); i++) {
            final Component c = selectPanel.getComponent(i);
            if (c instanceof ApplicationResetPanel) {
                ((ApplicationResetPanel) c).commitChanges(rfc);
            } else if (c instanceof DataBlockPanel) {
                ((DataBlockPanel) c).commitChanges((UserDataResponse) rfc.getSelectFrame(), dbIndex++);
            }
        }
    }

    /**
     * @return the frameName
     */
    public String getFrameName() {
        return frameName;
    }

}
